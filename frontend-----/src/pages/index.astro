---
const response = await fetch('http://localhost:3010/api/users');
const users = await response.json();

const rolesResponse = await fetch('http://localhost:3010/api/roles');
const roles = await rolesResponse.json();
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>User Management</title>
		
		<style>
			body {
				font-family: sans-serif;
				padding: 2em;
				background: #f4f4f9;
				color: #333;
			}
			h1, h2 {
				color: #005a9c;
			}
			table {
				width: 100%;
				border-collapse: collapse;
				margin-top: 1em;
			}
			th, td {
				border: 1px solid #ddd;
				padding: 8px;
				text-align: left;
			}
			th {
				background-color: #005a9c;
				color: white;
			}
			tr:nth-child(even) { background-color: #f2f2f2; }
			form {
				background: white;
				padding: 2em;
				border-radius: 8px;
				margin-top: 2em;
				box-shadow: 0 2px 4px rgba(0,0,0,0.1);
			}
			.form-group {
				margin-bottom: 1em;
			}
			label {
				display: block;
				margin-bottom: 0.5em;
			}
			input, select {
				width: 100%;
				padding: 8px;
				border: 1px solid #ccc;
				border-radius: 4px;
			}
			button {
				background-color: #007bff;
				color: white;
				padding: 10px 15px;
				border: none;
				border-radius: 4px;
				cursor: pointer;
			}
			button:hover { background-color: #0056b3; }
			.edit-form-container, .add-form-container, .login-form-container {
				display: none; /* Hidden by default */
				margin-top: 2em;
				padding: 2em;
				background: #e6f2ff;
				border-radius: 8px;
				box-shadow: 0 2px 4px rgba(0,0,0,0.1);
			}
			.edit-form-container.active, .add-form-container.active, .login-form-container.active {
				display: block; /* Show when active */
			}
			.action-buttons button {
				margin-right: 5px;
			}
			.delete-button {
				background-color: #dc3545;
			}
			.delete-button:hover {
				background-color: #c82333;
			}
		</style>
	</head>
	<body>
		<h1>User Management</h1>

		<h2>Existing Users</h2>
		<table>
			<thead>
				<tr>
					<th>ID</th>
					<th>Name</th>
					<th>Email</th>
					<th>Role</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				{users.map(user => (
					<tr>
						<td>{user.id}</td>
						<td>{user.name}</td>
						<td>{user.email}</td>
						<td>{user.rol}</td>
						<td class="action-buttons">
							<button class="edit-button" data-user-id={user.id}
								data-user-name={user.name}
								data-user-email={user.email}
								data-user-role={user.rol}>Edit</button>
							<button class="delete-button" data-user-id={user.id}>Delete</button>
						</td>
					</tr>
				))}
			</tbody>
		</table>

		<button id="showAddUserFormButton">Add New User</button>
		<button id="showLoginFormButton">Login</button>

		<div id="addUserFormContainer" class="add-form-container">
			<h2>Add New User</h2>
			<form id="addUserForm">
				<div class="form-group">
					<label for="name">Name</label>
					<input type="text" id="name" name="name" required />
				</div>
				<div class="form-group">
					<label for="email">Email</label>
					<input type="email" id="email" name="email" required />
				</div>
				<div class="form-group">
					<label for="password">Password</label>
					<input type="password" id="password" name="password" required />
				</div>
				<div class="form-group">
					<label for="role">Role</label>
					<select id="role" name="role" required>
						{roles.map(role => <option value={role}>{role}</option>)}
					</select>
				</div>
				<button type="submit">Add User</button>
				<button type="button" id="cancelAddButton">Cancel</button>
			</form>
		</div>

		<div id="editUserFormContainer" class="edit-form-container">
			<h2>Edit User</h2>
			<form id="editUserForm">
				<input type="hidden" id="editUserId" name="id" />
				<div class="form-group">
					<label for="editName">Name</label>
					<input type="text" id="editName" name="name" required />
				</div>
				<div class="form-group">
					<label for="editEmail">Email</label>
					<input type="email" id="editEmail" name="email" required />
				</div>
				<div class="form-group">
					<label for="editPassword">New Password (optional)</label>
					<input type="password" id="editPassword" name="password" />
				</div>
				<div class="form-group">
					<label for="editRole">Role</label>
					<select id="editRole" name="role" required>
						{roles.map(role => <option value={role}>{role}</option>)}
					</select>
				</div>
				<button type="submit">Update User</button>
				<button type="button" id="cancelEditButton">Cancel</button>
			</form>
		</div>

		<div id="loginFormContainer" class="login-form-container">
			<h2>Login</h2>
			<form id="loginForm">
				<div class="form-group">
					<label for="loginEmail">Email</label>
					<input type="email" id="loginEmail" name="email" required />
				</div>
				<div class="form-group">
					<label for="loginPassword">Password</label>
					<input type="password" id="loginPassword" name="password" required />
				</div>
				<button type="submit">Login</button>
				<button type="button" id="cancelLoginButton">Cancel</button>
			</form>
		</div>

		<script>
			// Add User Form functionality
			const addUserFormContainer = document.getElementById('addUserFormContainer');
			const showAddUserFormButton = document.getElementById('showAddUserFormButton');
			const cancelAddButton = document.getElementById('cancelAddButton');

			showAddUserFormButton.addEventListener('click', () => {
				addUserFormContainer.classList.add('active');
				editUserFormContainer.classList.remove('active'); // Hide edit form
				loginFormContainer.classList.remove('active'); // Hide login form
				window.scrollTo(0, document.body.scrollHeight); // Scroll to form
			});

			cancelAddButton.addEventListener('click', () => {
				addUserFormContainer.classList.remove('active');
			});

			document.getElementById('addUserForm').addEventListener('submit', async (event) => {
				event.preventDefault();

				const form = event.target as HTMLFormElement;
				const formData = new FormData(form);

				const name = formData.get('name');
				const email = formData.get('email');
				const password = formData.get('password');
				const role = formData.get('role');

				const response = await fetch('http://localhost:3010/api/users', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ name, email, password, role })
				});

				if (response.ok) {
					alert('User added successfully!');
					window.location.reload();
				} else {
					const errorData = await response.json();
					alert(`Error: ${errorData.error || 'Failed to add user'}`);
				}
			});

			// Edit functionality
			const editUserFormContainer = document.getElementById('editUserFormContainer');
			const editUserForm = document.getElementById('editUserForm') as HTMLFormElement;
			const editUserIdInput = document.getElementById('editUserId') as HTMLInputElement;
			const editNameInput = document.getElementById('editName') as HTMLInputElement;
			const editEmailInput = document.getElementById('editEmail') as HTMLInputElement;
			const editPasswordInput = document.getElementById('editPassword') as HTMLInputElement;
			const editRoleSelect = document.getElementById('editRole') as HTMLSelectElement;
			const cancelEditButton = document.getElementById('cancelEditButton');

			document.querySelectorAll('.edit-button').forEach(button => {
				button.addEventListener('click', (event) => {
					const target = event.target as HTMLButtonElement;
					const userId = target.dataset.userId;
					const userName = target.dataset.userName;
					const userEmail = target.dataset.userEmail;
					const userRole = target.dataset.userRole;

					editUserIdInput.value = userId;
					editNameInput.value = userName;
					editEmailInput.value = userEmail;
					editRoleSelect.value = userRole;
					editPasswordInput.value = ''; // Clear password field

					editUserFormContainer.classList.add('active');
					addUserFormContainer.classList.remove('active'); // Hide add form if visible
					loginFormContainer.classList.remove('active'); // Hide login form
					window.scrollTo(0, document.body.scrollHeight); // Scroll to form
				});
			});

			cancelEditButton.addEventListener('click', () => {
				editUserFormContainer.classList.remove('active');
			});

			editUserForm.addEventListener('submit', async (event) => {
				event.preventDefault();

				const formData = new FormData(editUserForm);
				const id = formData.get('id');
				const name = formData.get('name');
				const email = formData.get('email');
				const password = formData.get('password');
				const role = formData.get('role');

				const data: { name: FormDataEntryValue; email: FormDataEntryValue; role: FormDataEntryValue; password?: FormDataEntryValue } = {
					name,
					email,
					role,
				};
				if (password) {
					data.password = password;
				}

				const response = await fetch(`http://localhost:3010/api/users/${id}`, {
					method: 'PUT',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(data)
				});

				if (response.ok) {
					alert('User updated successfully!');
					window.location.reload();
				} else {
					const errorData = await response.json();
					alert(`Error: ${errorData.error || 'Failed to update user'}`);
				}
			});

			// Delete functionality
			document.querySelectorAll('.delete-button').forEach(button => {
				button.addEventListener('click', async (event) => {
					const target = event.target as HTMLButtonElement;
					const userId = target.dataset.userId;

					if (confirm('Are you sure you want to delete this user?')) {
						const response = await fetch(`http://localhost:3010/api/users/${userId}`, {
							method: 'DELETE',
						});

						if (response.ok) {
							alert('User deleted successfully!');
							window.location.reload();
						} else {
							const errorData = await response.json();
							alert(`Error: ${errorData.error || 'Failed to delete user'}`);
						}
					}
				});
			});

			// Login functionality
			const loginFormContainer = document.getElementById('loginFormContainer');
			const showLoginFormButton = document.getElementById('showLoginFormButton');
			const cancelLoginButton = document.getElementById('cancelLoginButton');
			const loginForm = document.getElementById('loginForm') as HTMLFormElement;

			showLoginFormButton.addEventListener('click', () => {
				loginFormContainer.classList.add('active');
				addUserFormContainer.classList.remove('active'); // Hide add form
				editUserFormContainer.classList.remove('active'); // Hide edit form
				window.scrollTo(0, document.body.scrollHeight); // Scroll to form
			});

			cancelLoginButton.addEventListener('click', () => {
				loginFormContainer.classList.remove('active');
			});

			loginForm.addEventListener('submit', async (event) => {
				event.preventDefault();

				const formData = new FormData(loginForm);
				const email = formData.get('email');
				const password = formData.get('password');

				const response = await fetch('http://localhost:3010/api/login', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ email, password })
				});

				if (response.ok) {
					const data = await response.json();
					alert(`Login successful! Welcome, ${data.user.name} (${data.user.role}).`);
					// In a real app, you'd store the user data/token in localStorage or a cookie
					// and redirect to a dashboard or update UI to show logged-in state.
				} else {
					const errorData = await response.json();
					alert(`Login failed: ${errorData.error || 'Unknown error'}`);
				}
			});
		</script>
	</body>
</html>